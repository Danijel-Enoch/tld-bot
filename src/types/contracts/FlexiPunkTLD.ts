/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FlexiPunkTLDInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "approve"
      | "balanceOf"
      | "burn"
      | "buyingDisabledForever"
      | "buyingEnabled"
      | "changeMetadataAddress"
      | "changeMinter"
      | "changeNameMaxLength"
      | "changePrice"
      | "changeReferralFee"
      | "changeRoyalty"
      | "changeRoyaltyFeeReceiver"
      | "changeRoyaltyFeeUpdater"
      | "defaultNames"
      | "disableBuyingForever"
      | "domainIdsNames"
      | "domains"
      | "editData"
      | "editDefaultDomain"
      | "factoryAddress"
      | "freezeMetadata"
      | "getApproved"
      | "getDomainData"
      | "getDomainHolder"
      | "idCounter"
      | "isApprovedForAll"
      | "metadataAddress"
      | "metadataFrozen"
      | "mint"
      | "minter"
      | "name"
      | "nameMaxLength"
      | "owner"
      | "ownerOf"
      | "price"
      | "referral"
      | "renounceOwnership"
      | "royalty"
      | "royaltyFeeReceiver"
      | "royaltyFeeUpdater"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "toggleBuyingDomains"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "DataChanged"
      | "DefaultDomainChanged"
      | "DomainBurned"
      | "DomainBuyingToggle"
      | "DomainCreated"
      | "MintingDisabledForever"
      | "OwnershipTransferred"
      | "ReferralFeeChanged"
      | "TldPriceChanged"
      | "TldRoyaltyChanged"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyingDisabledForever",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "buyingEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeMetadataAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeMinter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeNameMaxLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changePrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeReferralFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRoyalty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRoyaltyFeeReceiver",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRoyaltyFeeUpdater",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "defaultNames",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableBuyingForever",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainIdsNames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "domains", values: [string]): string;
  encodeFunctionData(
    functionFragment: "editData",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "editDefaultDomain",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "factoryAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freezeMetadata",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainData",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainHolder",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "idCounter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "metadataAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "metadataFrozen",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nameMaxLength",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "price", values?: undefined): string;
  encodeFunctionData(functionFragment: "referral", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "royalty", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "royaltyFeeReceiver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyFeeUpdater",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "toggleBuyingDomains",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyingDisabledForever",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyingEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMetadataAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeNameMaxLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeReferralFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRoyalty",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRoyaltyFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRoyaltyFeeUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defaultNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableBuyingForever",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainIdsNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "domains", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "editData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "editDefaultDomain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "factoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainHolder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "idCounter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "metadataFrozen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nameMaxLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "price", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "referral", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "royalty", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "royaltyFeeReceiver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyFeeUpdater",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "toggleBuyingDomains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DataChangedEvent {
  export type InputTuple = [user: AddressLike, domain: string];
  export type OutputTuple = [user: string, domain: string];
  export interface OutputObject {
    user: string;
    domain: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DefaultDomainChangedEvent {
  export type InputTuple = [user: AddressLike, defaultDomain: string];
  export type OutputTuple = [user: string, defaultDomain: string];
  export interface OutputObject {
    user: string;
    defaultDomain: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DomainBurnedEvent {
  export type InputTuple = [user: AddressLike, fullDomainName: string];
  export type OutputTuple = [user: string, fullDomainName: string];
  export interface OutputObject {
    user: string;
    fullDomainName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DomainBuyingToggleEvent {
  export type InputTuple = [user: AddressLike, domainBuyingToggle: boolean];
  export type OutputTuple = [user: string, domainBuyingToggle: boolean];
  export interface OutputObject {
    user: string;
    domainBuyingToggle: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DomainCreatedEvent {
  export type InputTuple = [
    user: AddressLike,
    owner: AddressLike,
    fullDomainName: string
  ];
  export type OutputTuple = [
    user: string,
    owner: string,
    fullDomainName: string
  ];
  export interface OutputObject {
    user: string;
    owner: string;
    fullDomainName: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintingDisabledForeverEvent {
  export type InputTuple = [user: AddressLike];
  export type OutputTuple = [user: string];
  export interface OutputObject {
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReferralFeeChangedEvent {
  export type InputTuple = [user: AddressLike, referralFee: BigNumberish];
  export type OutputTuple = [user: string, referralFee: bigint];
  export interface OutputObject {
    user: string;
    referralFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TldPriceChangedEvent {
  export type InputTuple = [user: AddressLike, tldPrice: BigNumberish];
  export type OutputTuple = [user: string, tldPrice: bigint];
  export interface OutputObject {
    user: string;
    tldPrice: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TldRoyaltyChangedEvent {
  export type InputTuple = [user: AddressLike, tldRoyalty: BigNumberish];
  export type OutputTuple = [user: string, tldRoyalty: bigint];
  export interface OutputObject {
    user: string;
    tldRoyalty: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface FlexiPunkTLD extends BaseContract {
  connect(runner?: ContractRunner | null): FlexiPunkTLD;
  waitForDeployment(): Promise<this>;

  interface: FlexiPunkTLDInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  burn: TypedContractMethod<[_domainName: string], [void], "nonpayable">;

  buyingDisabledForever: TypedContractMethod<[], [boolean], "view">;

  buyingEnabled: TypedContractMethod<[], [boolean], "view">;

  changeMetadataAddress: TypedContractMethod<
    [_metadataAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  changeMinter: TypedContractMethod<
    [_minter: AddressLike],
    [void],
    "nonpayable"
  >;

  changeNameMaxLength: TypedContractMethod<
    [_maxLength: BigNumberish],
    [void],
    "nonpayable"
  >;

  changePrice: TypedContractMethod<
    [_price: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeReferralFee: TypedContractMethod<
    [_referral: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeRoyalty: TypedContractMethod<
    [_royalty: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeRoyaltyFeeReceiver: TypedContractMethod<
    [_newReceiver: AddressLike],
    [void],
    "nonpayable"
  >;

  changeRoyaltyFeeUpdater: TypedContractMethod<
    [_newUpdater: AddressLike],
    [void],
    "nonpayable"
  >;

  defaultNames: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  disableBuyingForever: TypedContractMethod<[], [void], "nonpayable">;

  domainIdsNames: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  domains: TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, string, string] & {
        name: string;
        tokenId: bigint;
        holder: string;
        data: string;
      }
    ],
    "view"
  >;

  editData: TypedContractMethod<
    [_domainName: string, _data: string],
    [void],
    "nonpayable"
  >;

  editDefaultDomain: TypedContractMethod<
    [_domainName: string],
    [void],
    "nonpayable"
  >;

  factoryAddress: TypedContractMethod<[], [string], "view">;

  freezeMetadata: TypedContractMethod<[], [void], "nonpayable">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getDomainData: TypedContractMethod<[_domainName: string], [string], "view">;

  getDomainHolder: TypedContractMethod<[_domainName: string], [string], "view">;

  idCounter: TypedContractMethod<[], [bigint], "view">;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  metadataAddress: TypedContractMethod<[], [string], "view">;

  metadataFrozen: TypedContractMethod<[], [boolean], "view">;

  mint: TypedContractMethod<
    [_domainName: string, _domainHolder: AddressLike, _referrer: AddressLike],
    [bigint],
    "payable"
  >;

  minter: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nameMaxLength: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  price: TypedContractMethod<[], [bigint], "view">;

  referral: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  royalty: TypedContractMethod<[], [bigint], "view">;

  royaltyFeeReceiver: TypedContractMethod<[], [string], "view">;

  royaltyFeeUpdater: TypedContractMethod<[], [string], "view">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  toggleBuyingDomains: TypedContractMethod<[], [void], "nonpayable">;

  tokenURI: TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[_domainName: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "buyingDisabledForever"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "buyingEnabled"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "changeMetadataAddress"
  ): TypedContractMethod<[_metadataAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeMinter"
  ): TypedContractMethod<[_minter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeNameMaxLength"
  ): TypedContractMethod<[_maxLength: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changePrice"
  ): TypedContractMethod<[_price: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeReferralFee"
  ): TypedContractMethod<[_referral: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeRoyalty"
  ): TypedContractMethod<[_royalty: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeRoyaltyFeeReceiver"
  ): TypedContractMethod<[_newReceiver: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeRoyaltyFeeUpdater"
  ): TypedContractMethod<[_newUpdater: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "defaultNames"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "disableBuyingForever"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "domainIdsNames"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "domains"
  ): TypedContractMethod<
    [arg0: string],
    [
      [string, bigint, string, string] & {
        name: string;
        tokenId: bigint;
        holder: string;
        data: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "editData"
  ): TypedContractMethod<
    [_domainName: string, _data: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "editDefaultDomain"
  ): TypedContractMethod<[_domainName: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "factoryAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "freezeMetadata"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getDomainData"
  ): TypedContractMethod<[_domainName: string], [string], "view">;
  getFunction(
    nameOrSignature: "getDomainHolder"
  ): TypedContractMethod<[_domainName: string], [string], "view">;
  getFunction(
    nameOrSignature: "idCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "metadataAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "metadataFrozen"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [_domainName: string, _domainHolder: AddressLike, _referrer: AddressLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "minter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nameMaxLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "price"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "referral"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "royalty"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "royaltyFeeReceiver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "royaltyFeeUpdater"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "toggleBuyingDomains"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[_tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "DataChanged"
  ): TypedContractEvent<
    DataChangedEvent.InputTuple,
    DataChangedEvent.OutputTuple,
    DataChangedEvent.OutputObject
  >;
  getEvent(
    key: "DefaultDomainChanged"
  ): TypedContractEvent<
    DefaultDomainChangedEvent.InputTuple,
    DefaultDomainChangedEvent.OutputTuple,
    DefaultDomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "DomainBurned"
  ): TypedContractEvent<
    DomainBurnedEvent.InputTuple,
    DomainBurnedEvent.OutputTuple,
    DomainBurnedEvent.OutputObject
  >;
  getEvent(
    key: "DomainBuyingToggle"
  ): TypedContractEvent<
    DomainBuyingToggleEvent.InputTuple,
    DomainBuyingToggleEvent.OutputTuple,
    DomainBuyingToggleEvent.OutputObject
  >;
  getEvent(
    key: "DomainCreated"
  ): TypedContractEvent<
    DomainCreatedEvent.InputTuple,
    DomainCreatedEvent.OutputTuple,
    DomainCreatedEvent.OutputObject
  >;
  getEvent(
    key: "MintingDisabledForever"
  ): TypedContractEvent<
    MintingDisabledForeverEvent.InputTuple,
    MintingDisabledForeverEvent.OutputTuple,
    MintingDisabledForeverEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ReferralFeeChanged"
  ): TypedContractEvent<
    ReferralFeeChangedEvent.InputTuple,
    ReferralFeeChangedEvent.OutputTuple,
    ReferralFeeChangedEvent.OutputObject
  >;
  getEvent(
    key: "TldPriceChanged"
  ): TypedContractEvent<
    TldPriceChangedEvent.InputTuple,
    TldPriceChangedEvent.OutputTuple,
    TldPriceChangedEvent.OutputObject
  >;
  getEvent(
    key: "TldRoyaltyChanged"
  ): TypedContractEvent<
    TldRoyaltyChangedEvent.InputTuple,
    TldRoyaltyChangedEvent.OutputTuple,
    TldRoyaltyChangedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "DataChanged(address,string)": TypedContractEvent<
      DataChangedEvent.InputTuple,
      DataChangedEvent.OutputTuple,
      DataChangedEvent.OutputObject
    >;
    DataChanged: TypedContractEvent<
      DataChangedEvent.InputTuple,
      DataChangedEvent.OutputTuple,
      DataChangedEvent.OutputObject
    >;

    "DefaultDomainChanged(address,string)": TypedContractEvent<
      DefaultDomainChangedEvent.InputTuple,
      DefaultDomainChangedEvent.OutputTuple,
      DefaultDomainChangedEvent.OutputObject
    >;
    DefaultDomainChanged: TypedContractEvent<
      DefaultDomainChangedEvent.InputTuple,
      DefaultDomainChangedEvent.OutputTuple,
      DefaultDomainChangedEvent.OutputObject
    >;

    "DomainBurned(address,string)": TypedContractEvent<
      DomainBurnedEvent.InputTuple,
      DomainBurnedEvent.OutputTuple,
      DomainBurnedEvent.OutputObject
    >;
    DomainBurned: TypedContractEvent<
      DomainBurnedEvent.InputTuple,
      DomainBurnedEvent.OutputTuple,
      DomainBurnedEvent.OutputObject
    >;

    "DomainBuyingToggle(address,bool)": TypedContractEvent<
      DomainBuyingToggleEvent.InputTuple,
      DomainBuyingToggleEvent.OutputTuple,
      DomainBuyingToggleEvent.OutputObject
    >;
    DomainBuyingToggle: TypedContractEvent<
      DomainBuyingToggleEvent.InputTuple,
      DomainBuyingToggleEvent.OutputTuple,
      DomainBuyingToggleEvent.OutputObject
    >;

    "DomainCreated(address,address,string)": TypedContractEvent<
      DomainCreatedEvent.InputTuple,
      DomainCreatedEvent.OutputTuple,
      DomainCreatedEvent.OutputObject
    >;
    DomainCreated: TypedContractEvent<
      DomainCreatedEvent.InputTuple,
      DomainCreatedEvent.OutputTuple,
      DomainCreatedEvent.OutputObject
    >;

    "MintingDisabledForever(address)": TypedContractEvent<
      MintingDisabledForeverEvent.InputTuple,
      MintingDisabledForeverEvent.OutputTuple,
      MintingDisabledForeverEvent.OutputObject
    >;
    MintingDisabledForever: TypedContractEvent<
      MintingDisabledForeverEvent.InputTuple,
      MintingDisabledForeverEvent.OutputTuple,
      MintingDisabledForeverEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ReferralFeeChanged(address,uint256)": TypedContractEvent<
      ReferralFeeChangedEvent.InputTuple,
      ReferralFeeChangedEvent.OutputTuple,
      ReferralFeeChangedEvent.OutputObject
    >;
    ReferralFeeChanged: TypedContractEvent<
      ReferralFeeChangedEvent.InputTuple,
      ReferralFeeChangedEvent.OutputTuple,
      ReferralFeeChangedEvent.OutputObject
    >;

    "TldPriceChanged(address,uint256)": TypedContractEvent<
      TldPriceChangedEvent.InputTuple,
      TldPriceChangedEvent.OutputTuple,
      TldPriceChangedEvent.OutputObject
    >;
    TldPriceChanged: TypedContractEvent<
      TldPriceChangedEvent.InputTuple,
      TldPriceChangedEvent.OutputTuple,
      TldPriceChangedEvent.OutputObject
    >;

    "TldRoyaltyChanged(address,uint256)": TypedContractEvent<
      TldRoyaltyChangedEvent.InputTuple,
      TldRoyaltyChangedEvent.OutputTuple,
      TldRoyaltyChangedEvent.OutputObject
    >;
    TldRoyaltyChanged: TypedContractEvent<
      TldRoyaltyChangedEvent.InputTuple,
      TldRoyaltyChangedEvent.OutputTuple,
      TldRoyaltyChangedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
